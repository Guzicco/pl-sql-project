-- TRIGGER 1: USTALENIE DATY I PRZYPISANIE PRACOWNIKA Z NAJMNIEJSZA LICZBA OTWARTYCH ZGLOSZEN --

CREATE OR REPLACE TRIGGER BEFORE_INSERT_TICKETS
BEFORE INSERT ON TICKETS
    FOR EACH ROW
    DECLARE
        V_PRACOWNIK INT;
    BEGIN
        SELECT PRACOWNIK INTO V_PRACOWNIK FROM ILOSC_ZLECEN 
        WHERE ILOSC_ZLECEN.LICZBA=
        (SELECT MIN(ILOSC_ZLECEN.LICZBA) FROM ILOSC_ZLECEN);
        :NEW.DATA_ZGLOSZENIA := SYSDATE();
        :NEW.PRACOWNIK := V_PRACOWNIK;
    END;
/

-- TRIGGER 2: USTAWIENIE FLAGI CZY_OPLACONA NA PODSTAWIE ODEJMOWANIA NALEZNOSCI OD SUMY WPLAT --

CREATE OR REPLACE TRIGGER AFTER_INS_PLATNOSCI
FOR INSERT ON PLATNOSCI
COMPOUND TRIGGER

        V_WPLATY PLATNOSCI.KWOTA_WPLACONA%TYPE;
        V_WPLATA PLATNOSCI.KWOTA_WPLACONA%TYPE;
        V_NALEZNOSC FAKTURY.NALEZNOSC%TYPE;
        V_ROK FAKTURY.ROK%TYPE;
        V_MIESIAC FAKTURY.MIESIAC%TYPE;
        
        CURSOR C_FAKTURY IS SELECT NALEZNOSC, ROK, MIESIAC FROM FAKTURY 
        WHERE KLIENT_ID = :NEW.FAKTURY_KLIENT_ID
        ORDER BY FAKTURY.ROK, FAKTURY.MIESIAC;
        
        CURSOR C_PLATNOSCI IS SELECT KWOTA_WPLACONA FROM PLATNOSCI
        WHERE FAKTURY_KLIENT_ID = :NEW.FAKTURY_KLIENT_ID;

BEFORE EACH ROW IS
BEGIN
    V_WPLATY := 0;
OPEN C_PLATNOSCI;
    LOOP
        FETCH C_PLATNOSCI INTO V_WPLATA;
        EXIT WHEN C_PLATNOSCI%NOTFOUND;
        V_WPLATY := V_WPLATY + V_WPLATA;
    END LOOP;
END BEFORE EACH ROW;

AFTER EACH ROW IS
    BEGIN
        OPEN C_FAKTURY;
        LOOP
            FETCH C_FAKTURY INTO V_NALEZNOSC, V_ROK, V_MIESIAC;
            EXIT WHEN C_FAKTURY%NOTFOUND;
-- SPRAWDZENIE CZY KWOTA WPLAT JEST WIEKSZA OD NALEZNOSCI  --            
            IF (V_WPLATY > V_NALEZNOSC) THEN
                DBMS_OUTPUT.PUT_LINE('INNER');
                UPDATE FAKTURY
                SET CZY_OPLACONA = 'T'
                WHERE FAKTURY.KLIENT_ID = :NEW.FAKTURY_KLIENT_ID
                AND FAKTURY.ROK = V_ROK
                AND FAKTURY.MIESIAC = V_MIESIAC;
-- POMNIEJSZENIE WPLATY O NALEZNOSC DANEGO MIESIACA --
                V_WPLATY := V_WPLATY - V_NALEZNOSC;
            END IF;
        END LOOP;
        CLOSE C_FAKTURY;
    END AFTER EACH ROW;
END AFTER_INS_PLATNOSCI;
/


-- TRIGGER 3: USTALENIE NOWEJ CENY USLUGI PO MDL TABLICY INTERNET -- 

CREATE OR REPLACE TRIGGER AFTER_UPD_INTERNET
    AFTER UPDATE OR INSERT ON INTERNET
    FOR EACH ROW 
    DECLARE
        C_IDTV USLUGI.TELEWIZJA_ID%TYPE;
        C_IDNET USLUGI.INTERNET_ID%TYPE;
        CURSOR C_TV IS SELECT TELEWIZJA_ID, INTERNET_ID FROM USLUGI;
    BEGIN
        OPEN C_TV;
        LOOP
            FETCH C_TV INTO C_IDTV, C_IDNET;
            EXIT WHEN C_TV%NOTFOUND;
            IF (C_IDNET = :NEW.ID) THEN
            UPDATE USLUGI 
            SET KWOTA_USLUGI = :NEW.CENA + (SELECT CENA FROM TELEWIZJA WHERE TELEWIZJA.ID = C_IDTV)
            WHERE USLUGI.TELEWIZJA_ID = C_IDTV AND USLUGI.INTERNET_ID = :NEW.ID;
            END IF;
        END LOOP;
        CLOSE C_TV;
END;
/


-- TRIGGER 4: USTALENIE NOWEJ CENY USLUGI PO MDL TABLICY TELEWIZJA --

CREATE OR REPLACE TRIGGER AFTER_UPD_TV
    AFTER UPDATE OR INSERT ON TELEWIZJA
    FOR EACH ROW 
    DECLARE
        C_IDTV USLUGI.TELEWIZJA_ID%TYPE;
        C_IDNET USLUGI.INTERNET_ID%TYPE;
        CURSOR C_NET IS SELECT TELEWIZJA_ID, INTERNET_ID FROM USLUGI;
    BEGIN
        OPEN C_NET;
        LOOP
            FETCH C_NET INTO C_IDTV, C_IDNET;
            EXIT WHEN C_NET%NOTFOUND;
            IF (C_IDTV = :NEW.ID) THEN
            UPDATE USLUGI 
            SET KWOTA_USLUGI = :NEW.CENA + (SELECT CENA FROM INTERNET WHERE INTERNET.ID = C_IDNET)
            WHERE USLUGI.TELEWIZJA_ID = :NEW.ID AND USLUGI.INTERNET_ID = C_IDNET;
            END IF;
        END LOOP;
        CLOSE C_NET;
END;
/

-- TRIGGER 5: ZMIANA USLUGI NA NIEAKTYWNA PO ZAMKNIECIU ZGLOSZENIA ODLACZENIA KLIENTA --

CREATE OR REPLACE TRIGGER AFTER_UPDATE_TICKET
AFTER UPDATE ON TICKETS
FOR EACH ROW
BEGIN
    IF(:NEW.TYP_ZGLOSZENIA = 4 AND :NEW.ZAKONCZONE = 'T') THEN
        UPDATE KLIENT
        SET USLUGI_ID = 1000
        WHERE KLIENT.ID = :NEW.ZGLASZAJACY;
    END IF;
END;
/
-- EXAMPLE --
--
--SELECT USLUGI_ID FROM KLIENT WHERE ID = 102;
--UPDATE TICKETS
--SET ZAKONCZONE = 'T'
--WHERE ID = 13;
--SELECT USLUGI_ID FROM KLIENT WHERE ID = 102;